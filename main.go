package main

import (
	"flag"
	"fmt"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
	"github.com/lefes/curly-broccoli/quotes"
)

var (
	Token string = ""
)

type Quote interface {
	GetRandomAcademia() string
	GetRandom() string
}

func poll(session *discordgo.Session, m *discordgo.MessageCreate) {
	// Randomly create a poll with 3 options in the channel
	// Take 3 person from the channel
	users, err := session.GuildMembers(m.GuildID, "", 300)
	if err != nil {
		fmt.Println("error getting users,", err)
		return
	}

	// Get 3 random users
	rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(users), func(i, j int) { users[i], users[j] = users[j], users[i] })
	users = users[:3]

	// Create a poll
	poll := &discordgo.MessageEmbed{
		Title: "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞??? ü§îü§îü§î",
		Color: 0x00ff00,
		Fields: []*discordgo.MessageEmbedField{
			&discordgo.MessageEmbedField{
				Name:   "1",
				Value:  getNick(users[0]),
				Inline: true,
			},
			&discordgo.MessageEmbedField{
				Name:   "2",
				Value:  getNick(users[1]),
				Inline: true,
			},
			&discordgo.MessageEmbedField{
				Name:   "3",
				Value:  getNick(users[2]),
				Inline: true,
			},
		},
	}

	// Send the poll
	pollMessage, err := session.ChannelMessageSendEmbed(m.ChannelID, poll)
	if err != nil {
		fmt.Println("error sending poll,", err)
		return
	}

	reactions := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"}
	// Add reactions to the poll

	for _, v := range reactions {
		err := session.MessageReactionAdd(pollMessage.ChannelID, pollMessage.ID, v)
		if err != nil {
			fmt.Println("error adding reaction,", err)
			return
		}
	}

	// Wait for 2 hours
	time.Sleep(30 * time.Minute)

	// Get the poll results
	pollResults, err := session.ChannelMessage(pollMessage.ChannelID, pollMessage.ID)
	if err != nil {
		fmt.Println("error getting poll results,", err)
		return
	}

	// Get the most voted option
	var mostVotedOption string
	var mostVotedOptionCount int
	for _, v := range pollResults.Reactions {
		if v.Count > mostVotedOptionCount {
			mostVotedOption = v.Emoji.Name
			mostVotedOptionCount = v.Count
		}
	}

	// Get the winner
	var winner *discordgo.Member
	switch mostVotedOption {
	case "1Ô∏è‚É£":
		winner = users[0]
	case "2Ô∏è‚É£":
		winner = users[1]
	case "3Ô∏è‚É£":
		winner = users[2]
	}

	// Congratulate the winner
	_, err = session.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, %s, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞! üéâüéâüéâ", getNick(winner)))
	if err != nil {
		fmt.Println("error congratulating the winner,", err)
	}

}

func init() {
	// Load dotenv
	err := godotenv.Load()
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	if Token == "" {
		flag.StringVar(&Token, "token", "", "token")
		flag.Parse()
	}
	if Token == "" {
		Token = os.Getenv("TOKEN")
		if Token == "" {
			panic("You need to input the token.")
		}
	}
}

func getNick(member *discordgo.Member) string {
	if member.Nick == "" {
		return member.User.Username
	}
	return member.Nick
}

func main() {
	// Create a new Discord session using the provided bot token.
	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("error creating Discord session,", err)
		return
	}

	// Create interface for quotes
	quote := quotes.New()

	morningMessages := []string{
		"–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
		"–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞",
		"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
		"–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
		"–¥–æ–±—Ä–æ–π –Ω–æ—á–∏",
		"—É—Ç—Ä–æ",
		"—É—Ç—Ä–µ—á–∫–æ",
		"–¥–µ–Ω—å",
		"–¥–Ω–µ—á–∫–æ",
		"–≤–µ—á–µ—Ä",
		"–≤–µ—á–µ—á–∫–æ",
		"–Ω–æ—á—å",
		"–Ω–æ—á–µ—á–∫–æ",
		"morning",
		"evening",
		"night",
		"day",
		"good morning",
		"good evening",
		"good night",
		"good day",
		"–ø—Ä–æ—Å–Ω—É–ª",
		"–æ—Ç–∫—Ä—ã–ª –≥–ª–∞–∑–∞",
	}

	quotesPublic := []string{
		"¬´–ß–µ–º —É–º–Ω–µ–µ —á–µ–ª–æ–≤–µ–∫, —Ç–µ–º –ª–µ–≥—á–µ –æ–Ω –ø—Ä–∏–∑–Ω–∞–µ—Ç —Å–µ–±—è –¥—É—Ä–∞–∫–æ–º¬ª. –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
		"¬´–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç¬ª. –¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
		"¬´–í—Å–µ –º—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –æ—à–∏–±–∫–∏. –ù–æ –µ—Å–ª–∏ –º—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–µ–º –æ—à–∏–±–æ–∫, —Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º¬ª. –î–∂–æ–Ω –§. –ö–µ–Ω–Ω–µ–¥–∏",
		"¬´–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ ‚Äî —ç—Ç–æ –Ω–µ —Ä–∏—Å–∫. –í –∂–∏–∑–Ω–∏ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ ‚Äî —ç—Ç–æ –Ω–µ —Ä–∏—Å–∫¬ª. –î–∂–µ–π–º—Å –ö—ç–º–µ—Ä–æ–Ω",
		"¬´–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —ç—Ç–æ—Ç –º–∏—Ä. –ò–Ω–∞—á–µ –∑–∞—á–µ–º –º—ã –∑–¥–µ—Å—å?¬ª –°—Ç–∏–≤ –î–∂–æ–±—Å",
		"¬´–ú–æ–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Å—Ç–∏–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è¬ª. –ö–æ–∫–æ –®–∞–Ω–µ–ª—å",
		"¬´–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞—à—ë–ª, –∑–∞ —á—Ç–æ –º–æ–∂–µ—Ç —É–º–µ—Ä–µ—Ç—å, –æ–Ω –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –∂–∏—Ç—å¬ª. –ú–∞—Ä—Ç–∏–Ω –õ—é—Ç–µ—Ä –ö–∏–Ω–≥",
		"¬´–°–∞–º—ã–π –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å, ‚Äî —ç—Ç–æ —Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å¬ª. –≠—Ä–∏—Ö –§—Ä–æ–º–º",
		"¬´–ú—É–∑—ã–∫–∞ –∑–∞–≤–æ–¥–∏—Ç —Å–µ—Ä–¥—Ü–∞ —Ç–∞–∫, —á—Ç–æ –ø–ª—è—à–µ—Ç –∏ –ø–æ—ë—Ç —Ç–µ–ª–æ. –ê¬†–µ—Å—Ç—å –º—É–∑—ã–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º, —á—Ç–æ –Ω–∞–±–æ–ª–µ–ª–æ¬ª. –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
		"¬´–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—á–∏–Ω–∏–ª —Ç–µ–±–µ –∑–ª–æ, –Ω–µ –º—Å—Ç–∏. –°—è–¥—å –Ω–∞ –±–µ—Ä–µ–≥—É —Ä–µ–∫–∏, –∏ –≤—Å–∫–æ—Ä–µ —Ç—ã —É–≤–∏–¥–∏—à—å, –∫–∞–∫ –º–∏–º–æ —Ç–µ–±—è –ø—Ä–æ–ø–ª—ã–≤–∞–µ—Ç —Ç—Ä—É–ø —Ç–≤–æ–µ–≥–æ –≤—Ä–∞–≥–∞¬ª. –õ–∞–æ-—Ü–∑—ã",
		"¬´–õ—É—á—à–µ –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º, \"—Ä—É–≥–∞—é—â–∏–º—Å—è –º–∞—Ç–æ–º\", —á–µ–º —Ç–∏—Ö–æ–π, –≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–æ–π —Ç–≤–∞—Ä—å—é¬ª. –§–∞–∏–Ω–∞ –†–∞–Ω–µ–≤—Å–∫–∞—è",
		"¬´–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã –ø–æ–¥–Ω–∏–º–∞–µ—à—å—Å—è –≤ –≥–æ—Ä—É. –ï—Å–ª–∏ —Ç–µ–±–µ –ª–µ–≥–∫–æ, –∑–Ω–∞—á–∏—Ç —Ç—ã –ª–µ—Ç–∏—à—å –≤ –ø—Ä–æ–ø–∞—Å—Ç—å¬ª. –ì–µ–Ω—Ä–∏ –§–æ—Ä–¥",
		"¬´–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è —É–≤–∞–∂–∞–ª–∏, —É–≤–∞–∂–∞–π —Å–µ–±—è¬ª. –î–∂–µ–π–º—Å –§–µ–Ω–∏–º–æ—Ä –ö—É–ø–µ—Ä",
		"¬´–ú–æ–π —Å–ø–æ—Å–æ–± —à—É—Ç–∏—Ç—å¬†‚Äì —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É. –ù–∞ —Å–≤–µ—Ç–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–º–µ—à–Ω–µ–µ¬ª. –ë–µ—Ä–Ω–∞—Ä–¥ –®–æ—É",
		"¬´–ß–µ–º –±–æ–ª—å—à–µ –ª—é–±–≤–∏, –º—É–¥—Ä–æ—Å—Ç–∏, –∫—Ä–∞—Å–æ—Ç—ã, –¥–æ–±—Ä–æ—Ç—ã –≤—ã –æ—Ç–∫—Ä–æ–µ—Ç–µ –≤ —Å–∞–º–æ–º —Å–µ–±–µ, —Ç–µ–º –±–æ–ª—å—à–µ –≤—ã –∑–∞–º–µ—Ç–∏—Ç–µ –∏—Ö –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º –º–∏—Ä–µ¬ª. –ú–∞—Ç—å –¢–µ—Ä–µ–∑–∞",
		"¬´–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å–µ–±—è,¬†‚Äì —ç—Ç–æ –≤—ã –≤ –ø—Ä–æ—à–ª–æ–º. –ò¬†–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –ª—É—á—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å,¬†‚Äì —ç—Ç–æ –≤—ã —Å–µ–π—á–∞—Å¬ª. –ó–∏–≥–º—É–Ω–¥ –§—Ä–µ–π–¥",
		"¬´–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –¥–ª—è –º–µ–Ω—è —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–∞ –ø–æ–≥—Ä–µ–±–µ–Ω–∏—é –∑–∞–∂–∏–≤–æ...¬ª –ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
		"¬´–ò—Å—Ç–æ—Ä–∏—è ‚Äì —Å–∞–º—ã–π –ª—É—á—à–∏–π —É—á–∏—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–∞–º—ã–µ –ø–ª–æ—Ö–∏–µ —É—á–µ–Ω–∏–∫–∏¬ª. –ò–Ω–¥–∏—Ä–∞ –ì–∞–Ω–¥–∏",
		"¬´–î–∞–π —á–µ–ª–æ–≤–µ–∫—É –≤–ª–∞—Å—Ç—å, –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ –æ–Ω¬ª. –ù–∞–ø–æ–ª–µ–æ–Ω –ë–æ–Ω–∞–ø–∞—Ä—Ç",
		"¬´–ü–æ—Ä–∞–∂–µ–Ω–∏–µ? –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞¬ª. –ú–∞—Ä–≥–∞—Ä–µ—Ç –¢—ç—Ç—á–µ—Ä",
		"¬´–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø—Ä–æ–≤–æ–¥—è—Ç –∂–∏–∑–Ω—å –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—é–±–≤–∏ –≤–Ω–µ –∏—Ö —Å–∞–º–∏—Ö... –ü–æ–∫–∞ –ª—é–±–æ–≤—å –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ, –æ–Ω–∞ –ø–æ–≤—Å—é–¥—É¬ª. –ú–∞–π–∫–ª –î–∂–µ–∫—Å–æ–Ω",
		"¬´–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –æ–±–ª–∞–¥–∞–µ—Ç –æ–¥–Ω–∏–º –ø–æ–∏—Å—Ç–∏–Ω–µ –º–æ—â–Ω—ã–º –æ—Ä—É–∂–∏–µ–º, –∏ —ç—Ç–æ —Å–º–µ—Ö¬ª. –ú–∞—Ä–∫ –¢–≤–µ–Ω",
		"¬´–ö–æ–º–µ–¥–∏—è ‚Äì —ç—Ç–æ –æ—á–µ–Ω—å —Å–µ—Ä—å—ë–∑–Ω–æ–µ –¥–µ–ª–æ!¬ª –Æ—Ä–∏–π –ù–∏–∫—É–ª–∏–Ω",
		"¬´–í—Å–µ –º—ã —Å–º–µ—Ä—Ç–Ω—ã, –Ω–æ –Ω–µ –≤—Å–µ —É–º–µ—é—Ç –∂–∏—Ç—å¬ª. –î–∂–æ–Ω–∞—Ç–∞–Ω –°–≤–∏—Ñ—Ç",
		"¬´–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ —É–º–µ—Ä–µ—Ç—å¬†‚Äì —Å—Ç—Ä–∞—à–Ω–æ —É–º–µ—Ä–µ—Ç—å –≤–æ—Ç —Å–µ–π—á–∞—Å¬ª. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–ª–∂–µ–Ω–∏—Ü—ã–Ω",
	}

	spokiMessages := []string{
		"—Å–ø–æ–∫",
		"—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤",
		"—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
		"–¥–æ –∑–∞–≤—Ç—Ä–∞",
		"—Å–ø–∞—Ç—å",
		"–¥—Ä–µ–º",
		"–∫–µ–º–∞—Ä",
		"—Å–ø–ª—é",
		"–ø–æ–∫–∞",
	}

	phasmaMessages := []string{
		"—Ñ–∞—Å–º–∞",
		"—Ñ–∞–∑–º–∞",
		"—Ñ–∞–∑–º—É",
		"—Ñ–∞—Å–º—É",
		"—Ñ–∞–∑–º–æ–π",
		"—Ñ–∞—Å–º–æ–π",
		"—Ñ–∞–∑–º–µ",
		"—Ñ–∞—Å–º–µ",
		"—Ñ–∞–∑–º—ã",
		"—Ñ–∞—Å–º—ã",
		"phasma",
		"phasmaphobia",
		"–ø—Ä–∏–∑—Ä–∞–∫",
	}

	sickMessages := []string{
		"–∑–∞–±–æ–ª–µ–ª",
		"–∑–∞–±–æ–ª–µ–ª–∞",
		"–∑–∞–±–æ–ª–µ–ª–æ",
		"–∑–∞–±–æ–ª–µ–ª–∏",
		"–±–æ–ª–µ—é",
		"–±–æ–ª–∏—Ç",
	}

	legionEmojis := []string{"üá±", "üá™", "üá¨", "üáÆ", "üá¥", "üá≥"}

	session.Identify.Intents = discordgo.IntentsGuildMessages

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		// Checking on spoki and morning event
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				spoki = true
			}
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		// Checking on LEGION event
		if strings.Contains(strings.ToLower(m.Content), "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on spasibo message
		if strings.Contains(strings.ToLower(m.Content), "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø—Ä–∏–≤–µ—Ç" message
		if strings.Contains(strings.ToLower(m.Content), "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–∏—Ñ-–ø–∞—Ñ" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–∏—Ñ") && strings.ContainsAny(strings.ToLower(m.Content), "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		} else if strings.Contains(strings.ToLower(m.Content), "pif") && strings.ContainsAny(strings.ToLower(m.Content), "paf") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Pif-paf!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–¥–µ–¥ –∏–Ω—Å–∞–π–¥" message
		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –≥–µ–π" message
		if strings.Contains(strings.ToLower(m.Content), "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –ª–µ—Å–±–∏—è–Ω–∫–∞" message
		if strings.Contains(strings.ToLower(m.Content), "—è –ª–µ—Å–±–∏—è–Ω–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –±–∏" message
		if strings.Contains(strings.ToLower(m.Content), "—è –±–∏") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–î–µ–Ω—å —Ç—è–∂–µ–ª—ã–π üòµ‚Äçüí´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–∑–∞–±–æ–ª–µ–ª" message
		for _, v := range sickMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				_, err := s.ChannelMessageSendReply(m.ChannelID, "–°–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª–µ–π! üòç", m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
			}
		}

		// Checking on "—Ñ–∞–∑–º–∞" message
		for _, v := range phasmaMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëª")
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on "–ø–æ–ª—á–∞—Å–∞" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–ª—á–∞—Å–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ - –Ω–µ –≤–æ–ø—Ä–æ—Å. –ù–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ") {
			go poll(s, m)
		}

		if strings.Contains(strings.ToLower(m.Content), "!quote") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandom(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!academia") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, quote.GetRandomAcademia(), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.HasPrefix(strings.ToLower(m.Content), "!–ø–∏—Å—å–∫–∞") {
			rand.Seed(time.Now().UnixNano())
			user := "–¢—ã"
			if len(m.Mentions) != 0 {
				member, err := s.GuildMember(m.GuildID, m.Mentions[0].ID)
				if err == nil {
					user = getNick(member)
				}
			}

			//#nosec G404 -- This is a false positive
			piskaProc := rand.Intn(101)

			//#nosec G404 -- This is a false positive
			if rand.Intn(2) == 0 && piskaProc > 50 {
				//#nosec G404 -- This is a false positive
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("%s –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –≤–æ—Ç —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç–∞: %s", user, piskaProc, quotesPublic[rand.Intn(len(quotesPublic))]), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			if piskaProc > 50 {
				_, err := s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("%s –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –º–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", user, piskaProc), m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
				return
			}

			//#nosec G404 -- This is a false positive
			_, err = s.ChannelMessageSendReply(m.ChannelID, fmt.Sprintf("%s –ø–∏—Å—å–∫–∞ –Ω–∞ %d%%, –Ω–æ –Ω—É–∂–Ω–æ –µ—â–µ –≤—ã—Ä–∞—Å—Ç–∏!", user, piskaProc), m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

	})

	err = session.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
