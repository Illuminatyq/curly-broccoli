package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

var (
	Token string = "MTA1MDEwMTk3NDI2MTA1OTY1NQ.GrUzPm.EM3ojHafd8sii15tt3tMEoEIkoEAsmNGnotJ3M"
)

func init() {
	if Token == "" {
		flag.StringVar(&Token, "token", "", "token")
		flag.Parse()
	}
	if Token == "" {
		Token = os.Getenv("TOKEN")
		if Token == "" {
			panic("You need to input the token.")
		}
	}
}

func main() {
	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("error creating Discord session,", err)
		return
	}

	morningMessages := []string{
		"–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
		"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
		"–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
		"–¥–æ–±—Ä–æ–π –Ω–æ—á–∏",
		"—É—Ç—Ä–æ",
		"—É—Ç—Ä–µ—á–∫–æ",
		"–¥–µ–Ω—å",
		"–¥–Ω–µ—á–∫–æ",
		"–≤–µ—á–µ—Ä",
		"–≤–µ—á–µ—á–∫–æ",
		"–Ω–æ—á—å",
		"–Ω–æ—á–µ—á–∫–æ",
		"morning",
		"evening",
		"night",
		"day",
		"good morning",
		"good evening",
		"good night",
		"good day",
		"–ø—Ä–æ—Å–Ω—É–ª",
		"–æ—Ç–∫—Ä—ã–ª –≥–ª–∞–∑–∞",
	}
	spokiMessages := []string{
		"—Å–ø–æ–∫",
		"—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤",
		"—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
		"–¥–æ –∑–∞–≤—Ç—Ä–∞",
		"—Å–ø–∞—Ç—å",
		"–¥—Ä–µ–º",
		"–∫–µ–º–∞—Ä",
		"—Å–ø–ª—é",
	}
	legionEmojis := []string{"üá±", "üá™", "üá¨", "üáÆ", "üá¥", "üá≥"}

	session.Identify.Intents = discordgo.IntentsGuildMessages

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		// Checking on spoki and morning event
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(m.Content, v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(m.Content, v) {
				spoki = true
			}
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		// Checking on LEGION event
		if strings.Contains(m.Content, "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on spasibo message
		if strings.Contains(m.Content, "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø—Ä–∏–≤–µ—Ç" message
		if strings.Contains(m.Content, "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–∏—Ñ-–ø–∞—Ñ" message
		if strings.Contains(m.Content, "–ø–∏—Ñ") && strings.ContainsAny(m.Content, "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–¥–µ–¥ –∏–Ω—Å–∞–π–¥" message
		if strings.Contains(m.Content, "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –≥–µ–π" message
		if strings.Contains(m.Content, "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

	})

	err = session.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
