package main

import (
	"flag"
	"fmt"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
)

var (
	Token string = ""
)

func init() {
	// Load dotenv
	err := godotenv.Load()
	if err != nil {
		fmt.Println("Error loading .env file")
	}

	if Token == "" {
		flag.StringVar(&Token, "token", "", "token")
		flag.Parse()
	}
	if Token == "" {
		Token = os.Getenv("TOKEN")
		if Token == "" {
			panic("You need to input the token.")
		}
	}
}

func getNick(member *discordgo.Member) string {
	if member.Nick == "" {
		return member.User.Username
	}
	return member.Nick
}

func main() {
	session, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("error creating Discord session,", err)
		return
	}

	morningMessages := []string{
		"–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
		"–¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞",
		"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
		"–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
		"–¥–æ–±—Ä–æ–π –Ω–æ—á–∏",
		"—É—Ç—Ä–æ",
		"—É—Ç—Ä–µ—á–∫–æ",
		"–¥–µ–Ω—å",
		"–¥–Ω–µ—á–∫–æ",
		"–≤–µ—á–µ—Ä",
		"–≤–µ—á–µ—á–∫–æ",
		"–Ω–æ—á—å",
		"–Ω–æ—á–µ—á–∫–æ",
		"morning",
		"evening",
		"night",
		"day",
		"good morning",
		"good evening",
		"good night",
		"good day",
		"–ø—Ä–æ—Å–Ω—É–ª",
		"–æ—Ç–∫—Ä—ã–ª –≥–ª–∞–∑–∞",
	}

	spokiMessages := []string{
		"—Å–ø–æ–∫",
		"—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤",
		"—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
		"–¥–æ –∑–∞–≤—Ç—Ä–∞",
		"—Å–ø–∞—Ç—å",
		"–¥—Ä–µ–º",
		"–∫–µ–º–∞—Ä",
		"—Å–ø–ª—é",
		"–ø–æ–∫–∞",
	}

	phasmaMessages := []string{
		"—Ñ–∞—Å–º–∞",
		"—Ñ–∞–∑–º–∞",
		"—Ñ–∞–∑–º—É",
		"—Ñ–∞—Å–º—É",
		"—Ñ–∞–∑–º–æ–π",
		"—Ñ–∞—Å–º–æ–π",
		"—Ñ–∞–∑–º–µ",
		"—Ñ–∞—Å–º–µ",
		"—Ñ–∞–∑–º—ã",
		"—Ñ–∞—Å–º—ã",
		"phasma",
		"phasmaphobia",
		"–ø—Ä–∏–∑—Ä–∞–∫",
	}

	sickMessages := []string{
		"–∑–∞–±–æ–ª–µ–ª",
		"–∑–∞–±–æ–ª–µ–ª–∞",
		"–∑–∞–±–æ–ª–µ–ª–æ",
		"–∑–∞–±–æ–ª–µ–ª–∏",
		"–±–æ–ª–µ—é",
		"–±–æ–ª–∏—Ç",
	}

	legionEmojis := []string{"üá±", "üá™", "üá¨", "üáÆ", "üá¥", "üá≥"}

	session.Identify.Intents = discordgo.IntentsGuildMessages

	session.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		if m.Author.ID == s.State.User.ID {
			return
		}
		// Checking on spoki and morning event
		morning := false
		for _, v := range morningMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				morning = true
			}
		}

		spoki := false
		for _, v := range spokiMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				spoki = true
			}
		}

		if morning {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631674106294353")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "ü´†",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		if spoki {
			emoji, err := session.GuildEmoji(m.GuildID, "1016631826338566144")
			if err != nil {
				emoji = &discordgo.Emoji{
					Name: "üò¥",
				}
			}
			err = session.MessageReactionAdd(m.ChannelID, m.ID, emoji.APIName())
			if err != nil {
				fmt.Println("error reacting to message,", err)
			}
		}

		// Checking on LEGION event
		if strings.Contains(strings.ToLower(m.Content), "–ª–µ–≥–∏–æ–Ω") {
			for _, v := range legionEmojis {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, v)
				time.Sleep(100 * time.Millisecond)
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on spasibo message
		if strings.Contains(strings.ToLower(m.Content), "—Å–ø–∞—Å–∏–±–æ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–≠—Ç–æ —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ! üòéüòéüòé", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø—Ä–∏–≤–µ—Ç" message
		if strings.Contains(strings.ToLower(m.Content), "–ø—Ä–∏–≤–µ—Ç") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–∏—Ñ-–ø–∞—Ñ" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–∏—Ñ") && strings.ContainsAny(strings.ToLower(m.Content), "–ø–∞—Ñ") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ü–∏—Ñ-–ø–∞—Ñ!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		} else if strings.Contains(strings.ToLower(m.Content), "pif") && strings.ContainsAny(strings.ToLower(m.Content), "paf") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "Pif-paf!üî´üî´üî´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–¥–µ–¥ –∏–Ω—Å–∞–π–¥" message
		if strings.Contains(strings.ToLower(m.Content), "–¥–µ–¥ –∏–Ω—Å–∞–π–¥") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ì–ª–∏—Å—Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–º–µ—Ä–ª–∏?", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –≥–µ–π" message
		if strings.Contains(strings.ToLower(m.Content), "—è –≥–µ–π") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –ª–µ—Å–±–∏—è–Ω–∫–∞" message
		if strings.Contains(strings.ToLower(m.Content), "—è –ª–µ—Å–±–∏—è–Ω–∫–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "—è –±–∏" message
		if strings.Contains(strings.ToLower(m.Content), "—è –±–∏") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–Ø —Ç–æ–∂–µ!", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–î–µ–Ω—å —Ç—è–∂–µ–ª—ã–π üòµ‚Äçüí´", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		// Checking on "–∑–∞–±–æ–ª–µ–ª" message
		for _, v := range sickMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				_, err := s.ChannelMessageSendReply(m.ChannelID, "–°–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –∏ –±–æ–ª—å—à–µ –Ω–µ –±–æ–ª–µ–π! üòç", m.Reference())
				if err != nil {
					fmt.Println("error sending message,", err)
				}
			}
		}

		// Checking on "—Ñ–∞–∑–º–∞" message
		for _, v := range phasmaMessages {
			if strings.Contains(strings.ToLower(m.Content), v) {
				err := s.MessageReactionAdd(m.ChannelID, m.ID, "üëª")
				if err != nil {
					fmt.Println("error reacting to message,", err)
				}
			}
		}

		// Checking on "–ø–æ–ª—á–∞—Å–∞" message
		if strings.Contains(strings.ToLower(m.Content), "–ø–æ–ª—á–∞—Å–∞") {
			_, err := s.ChannelMessageSendReply(m.ChannelID, "–ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ - –Ω–µ –≤–æ–ø—Ä–æ—Å. –ù–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—á–∞—Å–∞, –ø–æ–ª—á–∞—Å–∞ (c) –ß–∞–π–æ–∫", m.Reference())
			if err != nil {
				fmt.Println("error sending message,", err)
			}
		}

		if strings.Contains(strings.ToLower(m.Content), "!–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ") {
			// Randomly create a poll with 3 options in the channel
			// Take 3 person from the channel
			users, err := session.GuildMembers(m.GuildID, "", 300)
			if err != nil {
				fmt.Println("error getting users,", err)
				return
			}

			// Get 3 random users
			rand.Seed(time.Now().UnixNano())
			rand.Shuffle(len(users), func(i, j int) { users[i], users[j] = users[j], users[i] })
			users = users[:3]

			// Create a poll
			poll := &discordgo.MessageEmbed{
				Title: "–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–∏—Å—å–∫–∞??? ü§îü§îü§î",
				Color: 0x00ff00,
				Fields: []*discordgo.MessageEmbedField{
					&discordgo.MessageEmbedField{
						Name:   "1",
						Value:  getNick(users[0]),
						Inline: true,
					},
					&discordgo.MessageEmbedField{
						Name:   "2",
						Value:  getNick(users[1]),
						Inline: true,
					},
					&discordgo.MessageEmbedField{
						Name:   "3",
						Value:  getNick(users[2]),
						Inline: true,
					},
				},
			}

			// Send the poll
			pollMessage, err := session.ChannelMessageSendEmbed(m.ChannelID, poll)
			if err != nil {
				fmt.Println("error sending poll,", err)
				return
			}

			reactions := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"}
			// Add reactions to the poll

			for _, v := range reactions {
				err := session.MessageReactionAdd(pollMessage.ChannelID, pollMessage.ID, v)
				if err != nil {
					fmt.Println("error adding reaction,", err)
					return
				}
			}

		}

	})

	err = session.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	<-make(chan struct{})

}
